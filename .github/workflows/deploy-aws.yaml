name: Deploy AWS Academy - EKS

on:
  pull_request:
    branches:
      - main
    paths:
      - develop
env:
  REGION_DEFAULT: "us-east-1"
  CLUSTER_NAME: "EKS_WSTECH"
  RELEASE_NAME: "lanchonetews"
  NAMESPACE: "default"
  TF_VERSION: "1.5.0"  # Versão do Terraform
  TF_WORKING_DIR: "./terraform"  # Diretório onde estão os arquivos do Terraform

jobs:
  deploy:
    name: Deploy AWS Academy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Debug AWS CLI
        run: |
          aws eks list-clusters --region ${{ env.REGION_DEFAULT }}

      - name: Check if EKS Cluster Exists
        id: check_cluster
        run: |
          CLUSTER_EXISTS=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }} --query "cluster.name" --output text 2>/dev/null || echo "not_found")
          if [ "$CLUSTER_EXISTS" == "${{ env.CLUSTER_NAME }}" ]; then
            echo "Cluster exists."
            echo "::set-output name=exists::true"
          elif [ "$CLUSTER_EXISTS" == "not_found" ]; then
            echo "Cluster does not exist."
            echo "::set-output name=exists::false"
          else
            echo "Error checking cluster existence: $CLUSTER_EXISTS"
            exit 1
          fi

      - name: Create EKS Cluster if Not Exists
        if: steps.check_cluster.outputs.exists == 'false'
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform init
          terraform apply -auto-approve

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }}

      - name: Helm Install or Upgrade
        run: |
          if helm ls --namespace "${{ env.NAMESPACE }}" --filter "^${{ env.RELEASE_NAME }}$" | grep "${{ env.RELEASE_NAME }}"; then
            echo "Release ${{ env.RELEASE_NAME }} exists. Upgrading..."
            helm upgrade ${{ env.RELEASE_NAME }} k8s/ --namespace ${{ env.NAMESPACE }}
          else
            echo "Release ${{ env.RELEASE_NAME }} does not exist. Installing..."
            helm install ${{ env.RELEASE_NAME }} k8s/ --namespace ${{ env.NAMESPACE }}
          fi