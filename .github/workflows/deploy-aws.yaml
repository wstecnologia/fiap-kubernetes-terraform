name: Deploy AWS EKS_WSTECH

on:
  pull_request:
    branches:
      - main

env:
  RELEASE_NAME: "lanchonetews"
  NAMESPACE: "default"
  CLUSTER_NAME: "EKS_WSTECH"
  REGION_DEFAULT: "us-east-1"
  URL_WH: http://lanchonetews:3000/api/payment-status
  PORT_WH: 3001
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

jobs:
  deploy:
    name: Deploy AWS Academy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/

      - name: Terraform Plan
        run: terraform plan -var "cluster_name=${{ env.CLUSTER_NAME }}"
        working-directory: terraform/

      - name: Debug AWS CLI
        run: |
          aws eks list-clusters --region ${{ env.REGION_DEFAULT }}

      - name: Check if EKS Cluster Exists
        id: check_cluster
        run: |
          CLUSTER_EXISTS=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }} --query "cluster.name" --output text 2>/dev/null || echo "not_found")
          if [ "$CLUSTER_EXISTS" == "${{ env.CLUSTER_NAME }}" ]; then
            echo "Cluster exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          elif [ "$CLUSTER_EXISTS" == "not_found" ]; then
            echo "Cluster does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "Error checking cluster existence: $CLUSTER_EXISTS"
            exit 1
          fi

      - name: Terraform Apply
        if: steps.check_cluster.outputs.exists == 'false'
        run: terraform apply -auto-approve -var "cluster_name=${{ env.CLUSTER_NAME }}"
        working-directory: terraform/

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }}

      - name: Debug Helm Values
        run: |
          echo "DB_HOST: ${{ secrets.DB_HOST }}"
          echo "DB_PORT: ${{ secrets.DB_PORT }}"
          echo "DB_USER: ${{ secrets.DB_USER }}"
          echo "DB_PASSWORD: ${{ secrets.DB_PASSWORD }}"
          echo "DATABASE: ${{ secrets.DATABASE }}"
          echo "URL_WH: ${{ env.URL_WH }}"
          echo "PORT_WH: ${{ env.PORT_WH }}"

      - name: Helm Install or Upgrade
        run: |
          if helm ls --namespace "${{ env.NAMESPACE }}" --filter "^${{ env.RELEASE_NAME }}$" | grep "${{ env.RELEASE_NAME }}"; then
            echo "Release ${{ env.RELEASE_NAME }} exists. Upgrading..."
            helm upgrade ${{ env.RELEASE_NAME }} k8s/ --namespace ${{ env.NAMESPACE }} \
            --set db.dbHost="${{ secrets.DB_HOST }}" \
            --set db.dbPort="${{ secrets.DB_PORT }}" \
            --set db.dbUser="${{ secrets.DB_USER }}" \
            --set db.dbPassword="${{ secrets.DB_PASSWORD }}" \
            --set db.database="${{ secrets.DATABASE }}" \
            --set host="${{env.URL_WH}}" \
            --set port="${{env.PORT_WH}}" 
            else
            echo "Release ${{ env.RELEASE_NAME }} does not exist. Installing..."
            helm install ${{ env.RELEASE_NAME }} k8s/ --namespace ${{ env.NAMESPACE }} \
            --set db.dbHost="${{ secrets.DB_HOST }}" \
            --set db.dbPort="${{ secrets.DB_PORT }}" \
            --set db.dbUser="${{ secrets.DB_USER }}" \
            --set db.dbPassword="${{ secrets.DB_PASSWORD }}" \
            --set db.database="${{ secrets.DATABASE }}" \
            --set host="${{env.URL_WH}}" \
            --set port="${{env.PORT_WH}}"
          fi
